// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4692.BELL;

import org.usfirst.frc4692.BELL.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton joystickButton12;
    public JoystickButton joystickButton11;
    public Joystick joystick1;
    public JoystickButton joystickButton1;
    public Joystick joystick2;
    public JoystickButton joystickButton2;
    public JoystickButton joystickButton3;
    public JoystickButton joystickButton4;
    public JoystickButton joystickButton6;
    public JoystickButton joystickButton7;
    public JoystickButton joystickButton5;
    public JoystickButton joystickButton9;
    public JoystickButton joystickButton8;
    public Joystick gamepad;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        gamepad = new Joystick(3);
        
        joystickButton8 = new JoystickButton(gamepad, 7);
        joystickButton8.whileHeld(new Reload());
        joystickButton9 = new JoystickButton(gamepad, 3);
        joystickButton9.whenReleased(new ReloadSolenoid());
        joystickButton5 = new JoystickButton(gamepad, 5);
        joystickButton5.whileHeld(new DropFinger());
        joystickButton7 = new JoystickButton(gamepad, 8);
        joystickButton7.whileHeld(new Fire());
        joystickButton6 = new JoystickButton(gamepad, 6);
        joystickButton6.whileHeld(new RaiseFinger());
        joystickButton4 = new JoystickButton(gamepad, 4);
        joystickButton4.whileHeld(new RSA());
        joystickButton3 = new JoystickButton(gamepad, 3);
        joystickButton3.whileHeld(new FireSolenoid());
        joystickButton2 = new JoystickButton(gamepad, 2);
        joystickButton2.whileHeld(new LSA());
        
        joystick2 = new Joystick(1);
        
        joystickButton1 = new JoystickButton(joystick2, 1);
        joystickButton1.whileHeld(new FingerSolo());
        
        joystick1 = new Joystick(0);
        
        joystickButton11 = new JoystickButton(joystick1, 2);
        joystickButton11.whenPressed(new LightON());
        joystickButton12 = new JoystickButton(joystick1, 3);
        joystickButton12.whenPressed(new LightOFF());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
       // SmartDashboard.putData("Command Autonomous", new CommandAutonomous());
        SmartDashboard.putData("DriveWithJoysticks", new DriveWithJoysticks());
        SmartDashboard.putData("DropFinger", new DropFinger());
        SmartDashboard.putData("RaiseFinger", new RaiseFinger());
        SmartDashboard.putData("Fire", new Fire());
        SmartDashboard.putData("Reload", new Reload());
        SmartDashboard.putData("FireSolenoid", new FireSolenoid());
        SmartDashboard.putData("RSA", new RSA());
        SmartDashboard.putData("LSA", new LSA());
        SmartDashboard.putData("Light ON", new LightON());
        SmartDashboard.putData("Light OFF", new LightOFF());
        SmartDashboard.putData("FingerSolo", new FingerSolo());
        SmartDashboard.putData("ReloadSolenoid", new ReloadSolenoid());
        SmartDashboard.putData("Command Group 1", new CommandGroup1());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }

    public Joystick getJoystick2() {
        return joystick2;
    }

    public Joystick getGamepad() {
        return gamepad;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

